//=============================================================================
//【 EffectManager 】
//=============================================================================

#include "../Game/GameManager.h"
#include "EffectBase.h"
#include "EffectManager.h"


//=============================================================================
// ■ EffectManager クラス
//=============================================================================

//---------------------------------------------------------------------
// ● コンストラクタ
//---------------------------------------------------------------------
EffectManager::EffectManager()
{
}

//---------------------------------------------------------------------
// ● デストラクタ
//---------------------------------------------------------------------
EffectManager::~EffectManager()
{
    EffectList::iterator itr = mEffectList.begin();
    EffectList::iterator end = mEffectList.end();
    for ( ; itr != end; ++itr )
    {
        SAFE_DELETE( (*itr) );
    }
}


//---------------------------------------------------------------------
// ● フレーム更新 (作成されている全てのエフェクトの update() を呼ぶ)
//---------------------------------------------------------------------
void EffectManager::update()
{
    EffectList::iterator itr = mEffectList.begin();
    EffectList::iterator end = mEffectList.end();
    for ( ; itr != end; )
    {
        if ( (*itr)->update() == false )
        {
            delete (*itr);
            itr = mEffectList.erase( itr );
        }
        else
        {
            ++itr;
        }
    }
}

//---------------------------------------------------------------------
// ● EffectBase のコンストラクタから呼ばれる
//---------------------------------------------------------------------
void EffectManager::addEffect( EffectBase* effect_ )
{
    mEffectList.push_back( effect_ );
}

//---------------------------------------------------------------------
// ● EffectBase のデストラクタから呼ばれる
//---------------------------------------------------------------------
//void EffectManager::removeEffect( EffectBase* effect_ )
//{
//    mEffectList.remove( effect_ );
//}


//=============================================================================
// ■ EffectBase クラス
//=============================================================================

//---------------------------------------------------------------------
// ● コンストラクタ
//---------------------------------------------------------------------
EffectBase::EffectBase()
{
    GameManager::getInstance()->getEffectManager()->addEffect( this );
}

//---------------------------------------------------------------------
// ● デストラクタ
//---------------------------------------------------------------------
EffectBase::~EffectBase()
{
    //GameManager::getInstance()->getEffectManager()->removeEffect( this );
}



//=============================================================================
//								end of file
//=============================================================================